// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: TransactionFactory)

// Package plugin is a generated GoMock package.
package plugin

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransactionFactory is a mock of TransactionFactory interface
type MockTransactionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionFactoryMockRecorder
}

// MockTransactionFactoryMockRecorder is the mock recorder for MockTransactionFactory
type MockTransactionFactoryMockRecorder struct {
	mock *MockTransactionFactory
}

// NewMockTransactionFactory creates a new mock instance
func NewMockTransactionFactory(ctrl *gomock.Controller) *MockTransactionFactory {
	mock := &MockTransactionFactory{ctrl: ctrl}
	mock.recorder = &MockTransactionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionFactory) EXPECT() *MockTransactionFactoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method
func (m *MockTransactionFactory) BeginTx() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (mr *MockTransactionFactoryMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTransactionFactory)(nil).BeginTx))
}

// Close mocks base method
func (m *MockTransactionFactory) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockTransactionFactoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransactionFactory)(nil).Close))
}

// Commit mocks base method
func (m *MockTransactionFactory) Commit(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit", arg0)
}

// Commit indicates an expected call of Commit
func (mr *MockTransactionFactoryMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransactionFactory)(nil).Commit), arg0)
}

// Rollback mocks base method
func (m *MockTransactionFactory) Rollback(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", arg0)
}

// Rollback indicates an expected call of Rollback
func (mr *MockTransactionFactoryMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransactionFactory)(nil).Rollback), arg0)
}
