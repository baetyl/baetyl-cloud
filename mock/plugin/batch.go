// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: Batch)

// Package plugin is a generated GoMock package.
package plugin

import (
	sql "database/sql"
	models "github.com/baetyl/baetyl-cloud/v2/models"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockBatch is a mock of Batch interface
type MockBatch struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMockRecorder
}

// MockBatchMockRecorder is the mock recorder for MockBatch
type MockBatchMockRecorder struct {
	mock *MockBatch
}

// NewMockBatch creates a new mock instance
func NewMockBatch(ctrl *gomock.Controller) *MockBatch {
	mock := &MockBatch{ctrl: ctrl}
	mock.recorder = &MockBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatch) EXPECT() *MockBatchMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockBatch) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockBatchMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBatch)(nil).Close))
}

// CountBatch mocks base method
func (m *MockBatch) CountBatch(arg0, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBatch", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBatch indicates an expected call of CountBatch
func (mr *MockBatchMockRecorder) CountBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBatch", reflect.TypeOf((*MockBatch)(nil).CountBatch), arg0, arg1)
}

// CountBatchByCallback mocks base method
func (m *MockBatch) CountBatchByCallback(arg0, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBatchByCallback", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBatchByCallback indicates an expected call of CountBatchByCallback
func (mr *MockBatchMockRecorder) CountBatchByCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBatchByCallback", reflect.TypeOf((*MockBatch)(nil).CountBatchByCallback), arg0, arg1)
}

// CountBatchByCallbackTx mocks base method
func (m *MockBatch) CountBatchByCallbackTx(arg0 *sqlx.Tx, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBatchByCallbackTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBatchByCallbackTx indicates an expected call of CountBatchByCallbackTx
func (mr *MockBatchMockRecorder) CountBatchByCallbackTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBatchByCallbackTx", reflect.TypeOf((*MockBatch)(nil).CountBatchByCallbackTx), arg0, arg1, arg2)
}

// CountBatchTx mocks base method
func (m *MockBatch) CountBatchTx(arg0 *sqlx.Tx, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBatchTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBatchTx indicates an expected call of CountBatchTx
func (mr *MockBatchMockRecorder) CountBatchTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBatchTx", reflect.TypeOf((*MockBatch)(nil).CountBatchTx), arg0, arg1, arg2)
}

// CreateBatch mocks base method
func (m *MockBatch) CreateBatch(arg0 *models.Batch) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatch indicates an expected call of CreateBatch
func (mr *MockBatchMockRecorder) CreateBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockBatch)(nil).CreateBatch), arg0)
}

// CreateBatchTx mocks base method
func (m *MockBatch) CreateBatchTx(arg0 *sqlx.Tx, arg1 *models.Batch) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatchTx", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatchTx indicates an expected call of CreateBatchTx
func (mr *MockBatchMockRecorder) CreateBatchTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatchTx", reflect.TypeOf((*MockBatch)(nil).CreateBatchTx), arg0, arg1)
}

// DeleteBatch mocks base method
func (m *MockBatch) DeleteBatch(arg0, arg1 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBatch indicates an expected call of DeleteBatch
func (mr *MockBatchMockRecorder) DeleteBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockBatch)(nil).DeleteBatch), arg0, arg1)
}

// DeleteBatchTx mocks base method
func (m *MockBatch) DeleteBatchTx(arg0 *sqlx.Tx, arg1, arg2 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatchTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBatchTx indicates an expected call of DeleteBatchTx
func (mr *MockBatchMockRecorder) DeleteBatchTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatchTx", reflect.TypeOf((*MockBatch)(nil).DeleteBatchTx), arg0, arg1, arg2)
}

// GetBatch mocks base method
func (m *MockBatch) GetBatch(arg0, arg1 string) (*models.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatch", arg0, arg1)
	ret0, _ := ret[0].(*models.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatch indicates an expected call of GetBatch
func (mr *MockBatchMockRecorder) GetBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockBatch)(nil).GetBatch), arg0, arg1)
}

// GetBatchTx mocks base method
func (m *MockBatch) GetBatchTx(arg0 *sqlx.Tx, arg1, arg2 string) (*models.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchTx indicates an expected call of GetBatchTx
func (mr *MockBatchMockRecorder) GetBatchTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchTx", reflect.TypeOf((*MockBatch)(nil).GetBatchTx), arg0, arg1, arg2)
}

// ListBatch mocks base method
func (m *MockBatch) ListBatch(arg0 string, arg1 *models.Filter) ([]models.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatch", arg0, arg1)
	ret0, _ := ret[0].([]models.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatch indicates an expected call of ListBatch
func (mr *MockBatchMockRecorder) ListBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatch", reflect.TypeOf((*MockBatch)(nil).ListBatch), arg0, arg1)
}

// ListBatchTx mocks base method
func (m *MockBatch) ListBatchTx(arg0 *sqlx.Tx, arg1 string, arg2 *models.Filter) ([]models.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBatchTx", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBatchTx indicates an expected call of ListBatchTx
func (mr *MockBatchMockRecorder) ListBatchTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBatchTx", reflect.TypeOf((*MockBatch)(nil).ListBatchTx), arg0, arg1, arg2)
}

// UpdateBatch mocks base method
func (m *MockBatch) UpdateBatch(arg0 *models.Batch) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatch indicates an expected call of UpdateBatch
func (mr *MockBatchMockRecorder) UpdateBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockBatch)(nil).UpdateBatch), arg0)
}

// UpdateBatchTx mocks base method
func (m *MockBatch) UpdateBatchTx(arg0 *sqlx.Tx, arg1 *models.Batch) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatchTx", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatchTx indicates an expected call of UpdateBatchTx
func (mr *MockBatchMockRecorder) UpdateBatchTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatchTx", reflect.TypeOf((*MockBatch)(nil).UpdateBatchTx), arg0, arg1)
}
