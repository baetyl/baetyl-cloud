// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/plugin (interfaces: ModelStorage)

// Package plugin is a generated GoMock package.
package plugin

import (
	models "github.com/baetyl/baetyl-cloud/v2/models"
	v1 "github.com/baetyl/baetyl-go/v2/spec/v1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModelStorage is a mock of ModelStorage interface
type MockModelStorage struct {
	ctrl     *gomock.Controller
	recorder *MockModelStorageMockRecorder
}

// MockModelStorageMockRecorder is the mock recorder for MockModelStorage
type MockModelStorageMockRecorder struct {
	mock *MockModelStorage
}

// NewMockModelStorage creates a new mock instance
func NewMockModelStorage(ctrl *gomock.Controller) *MockModelStorage {
	mock := &MockModelStorage{ctrl: ctrl}
	mock.recorder = &MockModelStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelStorage) EXPECT() *MockModelStorageMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockModelStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockModelStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModelStorage)(nil).Close))
}

// Create mocks base method
func (m *MockModelStorage) Create(arg0 *models.Shadow) (*models.Shadow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Shadow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockModelStorageMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockModelStorage)(nil).Create), arg0)
}

// CreateApplication mocks base method
func (m *MockModelStorage) CreateApplication(arg0 string, arg1 *v1.Application) (*v1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0, arg1)
	ret0, _ := ret[0].(*v1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockModelStorageMockRecorder) CreateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockModelStorage)(nil).CreateApplication), arg0, arg1)
}

// CreateConfig mocks base method
func (m *MockModelStorage) CreateConfig(arg0 string, arg1 *v1.Configuration) (*v1.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig
func (mr *MockModelStorageMockRecorder) CreateConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockModelStorage)(nil).CreateConfig), arg0, arg1)
}

// CreateNamespace mocks base method
func (m *MockModelStorage) CreateNamespace(arg0 *models.Namespace) (*models.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", arg0)
	ret0, _ := ret[0].(*models.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace
func (mr *MockModelStorageMockRecorder) CreateNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockModelStorage)(nil).CreateNamespace), arg0)
}

// CreateNode mocks base method
func (m *MockModelStorage) CreateNode(arg0 string, arg1 *v1.Node) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", arg0, arg1)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode
func (mr *MockModelStorageMockRecorder) CreateNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockModelStorage)(nil).CreateNode), arg0, arg1)
}

// CreateSecret mocks base method
func (m *MockModelStorage) CreateSecret(arg0 string, arg1 *v1.Secret) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret
func (mr *MockModelStorageMockRecorder) CreateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockModelStorage)(nil).CreateSecret), arg0, arg1)
}

// Delete mocks base method
func (m *MockModelStorage) Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockModelStorageMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockModelStorage)(nil).Delete), arg0, arg1)
}

// DeleteApplication mocks base method
func (m *MockModelStorage) DeleteApplication(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockModelStorageMockRecorder) DeleteApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockModelStorage)(nil).DeleteApplication), arg0, arg1)
}

// DeleteConfig mocks base method
func (m *MockModelStorage) DeleteConfig(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfig indicates an expected call of DeleteConfig
func (mr *MockModelStorageMockRecorder) DeleteConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockModelStorage)(nil).DeleteConfig), arg0, arg1)
}

// DeleteNamespace mocks base method
func (m *MockModelStorage) DeleteNamespace(arg0 *models.Namespace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace
func (mr *MockModelStorageMockRecorder) DeleteNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockModelStorage)(nil).DeleteNamespace), arg0)
}

// DeleteNode mocks base method
func (m *MockModelStorage) DeleteNode(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNode indicates an expected call of DeleteNode
func (mr *MockModelStorageMockRecorder) DeleteNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockModelStorage)(nil).DeleteNode), arg0, arg1)
}

// DeleteSecret mocks base method
func (m *MockModelStorage) DeleteSecret(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret
func (mr *MockModelStorageMockRecorder) DeleteSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockModelStorage)(nil).DeleteSecret), arg0, arg1)
}

// Get mocks base method
func (m *MockModelStorage) Get(arg0, arg1 string) (*models.Shadow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*models.Shadow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockModelStorageMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockModelStorage)(nil).Get), arg0, arg1)
}

// GetApplication mocks base method
func (m *MockModelStorage) GetApplication(arg0, arg1, arg2 string) (*v1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockModelStorageMockRecorder) GetApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockModelStorage)(nil).GetApplication), arg0, arg1, arg2)
}

// GetConfig mocks base method
func (m *MockModelStorage) GetConfig(arg0, arg1, arg2 string) (*v1.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockModelStorageMockRecorder) GetConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockModelStorage)(nil).GetConfig), arg0, arg1, arg2)
}

// GetNamespace mocks base method
func (m *MockModelStorage) GetNamespace(arg0 string) (*models.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0)
	ret0, _ := ret[0].(*models.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockModelStorageMockRecorder) GetNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockModelStorage)(nil).GetNamespace), arg0)
}

// GetNode mocks base method
func (m *MockModelStorage) GetNode(arg0, arg1 string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0, arg1)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode
func (mr *MockModelStorageMockRecorder) GetNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockModelStorage)(nil).GetNode), arg0, arg1)
}

// GetSecret mocks base method
func (m *MockModelStorage) GetSecret(arg0, arg1, arg2 string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockModelStorageMockRecorder) GetSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockModelStorage)(nil).GetSecret), arg0, arg1, arg2)
}

// IsLabelMatch mocks base method
func (m *MockModelStorage) IsLabelMatch(arg0 string, arg1 map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLabelMatch", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLabelMatch indicates an expected call of IsLabelMatch
func (mr *MockModelStorageMockRecorder) IsLabelMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLabelMatch", reflect.TypeOf((*MockModelStorage)(nil).IsLabelMatch), arg0, arg1)
}

// List mocks base method
func (m *MockModelStorage) List(arg0 string, arg1 *models.NodeList) (*models.ShadowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*models.ShadowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockModelStorageMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockModelStorage)(nil).List), arg0, arg1)
}

// ListApplication mocks base method
func (m *MockModelStorage) ListApplication(arg0 string, arg1 *models.ListOptions) (*models.ApplicationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplication", arg0, arg1)
	ret0, _ := ret[0].(*models.ApplicationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplication indicates an expected call of ListApplication
func (mr *MockModelStorageMockRecorder) ListApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplication", reflect.TypeOf((*MockModelStorage)(nil).ListApplication), arg0, arg1)
}

// ListConfig mocks base method
func (m *MockModelStorage) ListConfig(arg0 string, arg1 *models.ListOptions) (*models.ConfigurationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfig", arg0, arg1)
	ret0, _ := ret[0].(*models.ConfigurationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfig indicates an expected call of ListConfig
func (mr *MockModelStorageMockRecorder) ListConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfig", reflect.TypeOf((*MockModelStorage)(nil).ListConfig), arg0, arg1)
}

// ListNode mocks base method
func (m *MockModelStorage) ListNode(arg0 string, arg1 *models.ListOptions) (*models.NodeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNode", arg0, arg1)
	ret0, _ := ret[0].(*models.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNode indicates an expected call of ListNode
func (mr *MockModelStorageMockRecorder) ListNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNode", reflect.TypeOf((*MockModelStorage)(nil).ListNode), arg0, arg1)
}

// ListSecret mocks base method
func (m *MockModelStorage) ListSecret(arg0 string, arg1 *models.ListOptions) (*models.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecret", arg0, arg1)
	ret0, _ := ret[0].(*models.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecret indicates an expected call of ListSecret
func (mr *MockModelStorageMockRecorder) ListSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecret", reflect.TypeOf((*MockModelStorage)(nil).ListSecret), arg0, arg1)
}

// UpdateApplication mocks base method
func (m *MockModelStorage) UpdateApplication(arg0 string, arg1 *v1.Application) (*v1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1)
	ret0, _ := ret[0].(*v1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockModelStorageMockRecorder) UpdateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockModelStorage)(nil).UpdateApplication), arg0, arg1)
}

// UpdateConfig mocks base method
func (m *MockModelStorage) UpdateConfig(arg0 string, arg1 *v1.Configuration) (*v1.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig
func (mr *MockModelStorageMockRecorder) UpdateConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockModelStorage)(nil).UpdateConfig), arg0, arg1)
}

// UpdateDesire mocks base method
func (m *MockModelStorage) UpdateDesire(arg0 *models.Shadow) (*models.Shadow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDesire", arg0)
	ret0, _ := ret[0].(*models.Shadow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDesire indicates an expected call of UpdateDesire
func (mr *MockModelStorageMockRecorder) UpdateDesire(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDesire", reflect.TypeOf((*MockModelStorage)(nil).UpdateDesire), arg0)
}

// UpdateNode mocks base method
func (m *MockModelStorage) UpdateNode(arg0 string, arg1 *v1.Node) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", arg0, arg1)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode
func (mr *MockModelStorageMockRecorder) UpdateNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockModelStorage)(nil).UpdateNode), arg0, arg1)
}

// UpdateReport mocks base method
func (m *MockModelStorage) UpdateReport(arg0 *models.Shadow) (*models.Shadow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReport", arg0)
	ret0, _ := ret[0].(*models.Shadow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReport indicates an expected call of UpdateReport
func (mr *MockModelStorageMockRecorder) UpdateReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReport", reflect.TypeOf((*MockModelStorage)(nil).UpdateReport), arg0)
}

// UpdateSecret mocks base method
func (m *MockModelStorage) UpdateSecret(arg0 string, arg1 *v1.Secret) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecret indicates an expected call of UpdateSecret
func (mr *MockModelStorageMockRecorder) UpdateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockModelStorage)(nil).UpdateSecret), arg0, arg1)
}
