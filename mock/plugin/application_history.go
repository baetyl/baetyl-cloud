// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: AppHistory)

// Package plugin is a generated GoMock package.
package plugin

import (
	sql "database/sql"
	models "github.com/baetyl/baetyl-cloud/v2/models"
	v1 "github.com/baetyl/baetyl-go/v2/spec/v1"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockAppHistory is a mock of AppHistory interface
type MockAppHistory struct {
	ctrl     *gomock.Controller
	recorder *MockAppHistoryMockRecorder
}

// MockAppHistoryMockRecorder is the mock recorder for MockAppHistory
type MockAppHistoryMockRecorder struct {
	mock *MockAppHistory
}

// NewMockAppHistory creates a new mock instance
func NewMockAppHistory(ctrl *gomock.Controller) *MockAppHistory {
	mock := &MockAppHistory{ctrl: ctrl}
	mock.recorder = &MockAppHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppHistory) EXPECT() *MockAppHistoryMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockAppHistory) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockAppHistoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAppHistory)(nil).Close))
}

// CountApplication mocks base method
func (m *MockAppHistory) CountApplication(arg0 *sqlx.Tx, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountApplication indicates an expected call of CountApplication
func (mr *MockAppHistoryMockRecorder) CountApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountApplication", reflect.TypeOf((*MockAppHistory)(nil).CountApplication), arg0, arg1, arg2)
}

// CreateApplication mocks base method
func (m *MockAppHistory) CreateApplication(arg0 *v1.Application) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockAppHistoryMockRecorder) CreateApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockAppHistory)(nil).CreateApplication), arg0)
}

// CreateApplicationWithTx mocks base method
func (m *MockAppHistory) CreateApplicationWithTx(arg0 *sqlx.Tx, arg1 *v1.Application) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationWithTx", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationWithTx indicates an expected call of CreateApplicationWithTx
func (mr *MockAppHistoryMockRecorder) CreateApplicationWithTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationWithTx", reflect.TypeOf((*MockAppHistory)(nil).CreateApplicationWithTx), arg0, arg1)
}

// DeleteApplication mocks base method
func (m *MockAppHistory) DeleteApplication(arg0, arg1, arg2 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockAppHistoryMockRecorder) DeleteApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockAppHistory)(nil).DeleteApplication), arg0, arg1, arg2)
}

// DeleteApplicationWithTx mocks base method
func (m *MockAppHistory) DeleteApplicationWithTx(arg0 *sqlx.Tx, arg1, arg2, arg3 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationWithTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationWithTx indicates an expected call of DeleteApplicationWithTx
func (mr *MockAppHistoryMockRecorder) DeleteApplicationWithTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationWithTx", reflect.TypeOf((*MockAppHistory)(nil).DeleteApplicationWithTx), arg0, arg1, arg2, arg3)
}

// GetApplication mocks base method
func (m *MockAppHistory) GetApplication(arg0, arg1, arg2 string) (*v1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockAppHistoryMockRecorder) GetApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockAppHistory)(nil).GetApplication), arg0, arg1, arg2)
}

// ListApplication mocks base method
func (m *MockAppHistory) ListApplication(arg0 string, arg1 *models.Filter) ([]v1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplication", arg0, arg1)
	ret0, _ := ret[0].([]v1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplication indicates an expected call of ListApplication
func (mr *MockAppHistoryMockRecorder) ListApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplication", reflect.TypeOf((*MockAppHistory)(nil).ListApplication), arg0, arg1)
}

// UpdateApplication mocks base method
func (m *MockAppHistory) UpdateApplication(arg0 *v1.Application, arg1 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockAppHistoryMockRecorder) UpdateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockAppHistory)(nil).UpdateApplication), arg0, arg1)
}

// UpdateApplicationWithTx mocks base method
func (m *MockAppHistory) UpdateApplicationWithTx(arg0 *sqlx.Tx, arg1 *v1.Application, arg2 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationWithTx indicates an expected call of UpdateApplicationWithTx
func (mr *MockAppHistoryMockRecorder) UpdateApplicationWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationWithTx", reflect.TypeOf((*MockAppHistory)(nil).UpdateApplicationWithTx), arg0, arg1, arg2)
}
