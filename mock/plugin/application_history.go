// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: AppHistory)

// Package plugin is a generated GoMock package.
package plugin

import (
	sql "database/sql"
	models "github.com/baetyl/baetyl-cloud/v2/models"
	v1 "github.com/baetyl/baetyl-go/v2/spec/v1"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockAppHistory is a mock of AppHistory interface
type MockAppHistory struct {
	ctrl     *gomock.Controller
	recorder *MockAppHistoryMockRecorder
}

// MockAppHistoryMockRecorder is the mock recorder for MockAppHistory
type MockAppHistoryMockRecorder struct {
	mock *MockAppHistory
}

// NewMockAppHistory creates a new mock instance
func NewMockAppHistory(ctrl *gomock.Controller) *MockAppHistory {
	mock := &MockAppHistory{ctrl: ctrl}
	mock.recorder = &MockAppHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppHistory) EXPECT() *MockAppHistoryMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockAppHistory) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockAppHistoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAppHistory)(nil).Close))
}

// CountApplicationHis mocks base method
func (m *MockAppHistory) CountApplicationHis(arg0 *sqlx.Tx, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountApplicationHis", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountApplicationHis indicates an expected call of CountApplicationHis
func (mr *MockAppHistoryMockRecorder) CountApplicationHis(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountApplicationHis", reflect.TypeOf((*MockAppHistory)(nil).CountApplicationHis), arg0, arg1, arg2)
}

// CreateApplicationHis mocks base method
func (m *MockAppHistory) CreateApplicationHis(arg0 *v1.Application) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationHis", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationHis indicates an expected call of CreateApplicationHis
func (mr *MockAppHistoryMockRecorder) CreateApplicationHis(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationHis", reflect.TypeOf((*MockAppHistory)(nil).CreateApplicationHis), arg0)
}

// CreateApplicationHisWithTx mocks base method
func (m *MockAppHistory) CreateApplicationHisWithTx(arg0 *sqlx.Tx, arg1 *v1.Application) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationHisWithTx", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationHisWithTx indicates an expected call of CreateApplicationHisWithTx
func (mr *MockAppHistoryMockRecorder) CreateApplicationHisWithTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationHisWithTx", reflect.TypeOf((*MockAppHistory)(nil).CreateApplicationHisWithTx), arg0, arg1)
}

// DeleteApplicationHis mocks base method
func (m *MockAppHistory) DeleteApplicationHis(arg0, arg1, arg2 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationHis", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationHis indicates an expected call of DeleteApplicationHis
func (mr *MockAppHistoryMockRecorder) DeleteApplicationHis(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationHis", reflect.TypeOf((*MockAppHistory)(nil).DeleteApplicationHis), arg0, arg1, arg2)
}

// DeleteApplicationHisWithTx mocks base method
func (m *MockAppHistory) DeleteApplicationHisWithTx(arg0 *sqlx.Tx, arg1, arg2, arg3 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationHisWithTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplicationHisWithTx indicates an expected call of DeleteApplicationHisWithTx
func (mr *MockAppHistoryMockRecorder) DeleteApplicationHisWithTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationHisWithTx", reflect.TypeOf((*MockAppHistory)(nil).DeleteApplicationHisWithTx), arg0, arg1, arg2, arg3)
}

// GetApplicationHis mocks base method
func (m *MockAppHistory) GetApplicationHis(arg0, arg1, arg2 string) (*v1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationHis", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationHis indicates an expected call of GetApplicationHis
func (mr *MockAppHistoryMockRecorder) GetApplicationHis(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationHis", reflect.TypeOf((*MockAppHistory)(nil).GetApplicationHis), arg0, arg1, arg2)
}

// ListApplicationHis mocks base method
func (m *MockAppHistory) ListApplicationHis(arg0 string, arg1 *models.Filter) ([]v1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationHis", arg0, arg1)
	ret0, _ := ret[0].([]v1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationHis indicates an expected call of ListApplicationHis
func (mr *MockAppHistoryMockRecorder) ListApplicationHis(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationHis", reflect.TypeOf((*MockAppHistory)(nil).ListApplicationHis), arg0, arg1)
}

// UpdateApplicationHis mocks base method
func (m *MockAppHistory) UpdateApplicationHis(arg0 *v1.Application, arg1 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationHis", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationHis indicates an expected call of UpdateApplicationHis
func (mr *MockAppHistoryMockRecorder) UpdateApplicationHis(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationHis", reflect.TypeOf((*MockAppHistory)(nil).UpdateApplicationHis), arg0, arg1)
}

// UpdateApplicationHisWithTx mocks base method
func (m *MockAppHistory) UpdateApplicationHisWithTx(arg0 *sqlx.Tx, arg1 *v1.Application, arg2 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationHisWithTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationHisWithTx indicates an expected call of UpdateApplicationHisWithTx
func (mr *MockAppHistoryMockRecorder) UpdateApplicationHisWithTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationHisWithTx", reflect.TypeOf((*MockAppHistory)(nil).UpdateApplicationHisWithTx), arg0, arg1, arg2)
}
