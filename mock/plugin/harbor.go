// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: Harbor)

// Package plugin is a generated GoMock package.
package plugin

import (
	common "github.com/baetyl/baetyl-cloud/v2/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHarbor is a mock of Harbor interface
type MockHarbor struct {
	ctrl     *gomock.Controller
	recorder *MockHarborMockRecorder
}

// MockHarborMockRecorder is the mock recorder for MockHarbor
type MockHarborMockRecorder struct {
	mock *MockHarbor
}

// NewMockHarbor creates a new mock instance
func NewMockHarbor(ctrl *gomock.Controller) *MockHarbor {
	mock := &MockHarbor{ctrl: ctrl}
	mock.recorder = &MockHarborMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHarbor) EXPECT() *MockHarborMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockHarbor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockHarborMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHarbor)(nil).Close))
}

// GetImageDigest mocks base method
func (m *MockHarbor) GetImageDigest(arg0 *common.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageDigest", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageDigest indicates an expected call of GetImageDigest
func (mr *MockHarborMockRecorder) GetImageDigest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageDigest", reflect.TypeOf((*MockHarbor)(nil).GetImageDigest), arg0)
}
