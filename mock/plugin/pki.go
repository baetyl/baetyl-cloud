// Code generated by MockGen. DO NOT EDIT.
// Source: pki.go

// Package plugin is a generated GoMock package.
package plugin

import (
	x509 "crypto/x509"
	plugin "github.com/baetyl/baetyl-cloud/v2/plugin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPKI is a mock of PKI interface
type MockPKI struct {
	ctrl     *gomock.Controller
	recorder *MockPKIMockRecorder
}

// MockPKIMockRecorder is the mock recorder for MockPKI
type MockPKIMockRecorder struct {
	mock *MockPKI
}

// NewMockPKI creates a new mock instance
func NewMockPKI(ctrl *gomock.Controller) *MockPKI {
	mock := &MockPKI{ctrl: ctrl}
	mock.recorder = &MockPKIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPKI) EXPECT() *MockPKIMockRecorder {
	return m.recorder
}

// GetRootCertId mocks base method
func (m *MockPKI) GetRootCertId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCertId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRootCertId indicates an expected call of GetRootCertId
func (mr *MockPKIMockRecorder) GetRootCertId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCertId", reflect.TypeOf((*MockPKI)(nil).GetRootCertId))
}

// CreateRootCert mocks base method
func (m *MockPKI) CreateRootCert(info *x509.CertificateRequest, parentId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRootCert", info, parentId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRootCert indicates an expected call of CreateRootCert
func (mr *MockPKIMockRecorder) CreateRootCert(info, parentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRootCert", reflect.TypeOf((*MockPKI)(nil).CreateRootCert), info, parentId)
}

// GetRootCert mocks base method
func (m *MockPKI) GetRootCert(rootId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCert", rootId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootCert indicates an expected call of GetRootCert
func (mr *MockPKIMockRecorder) GetRootCert(rootId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCert", reflect.TypeOf((*MockPKI)(nil).GetRootCert), rootId)
}

// DeleteRootCert mocks base method
func (m *MockPKI) DeleteRootCert(rootId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRootCert", rootId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRootCert indicates an expected call of DeleteRootCert
func (mr *MockPKIMockRecorder) DeleteRootCert(rootId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRootCert", reflect.TypeOf((*MockPKI)(nil).DeleteRootCert), rootId)
}

// CreateServerCert mocks base method
func (m *MockPKI) CreateServerCert(csr []byte, rootId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerCert", csr, rootId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerCert indicates an expected call of CreateServerCert
func (mr *MockPKIMockRecorder) CreateServerCert(csr, rootId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerCert", reflect.TypeOf((*MockPKI)(nil).CreateServerCert), csr, rootId)
}

// GetServerCert mocks base method
func (m *MockPKI) GetServerCert(certId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerCert", certId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerCert indicates an expected call of GetServerCert
func (mr *MockPKIMockRecorder) GetServerCert(certId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerCert", reflect.TypeOf((*MockPKI)(nil).GetServerCert), certId)
}

// DeleteServerCert mocks base method
func (m *MockPKI) DeleteServerCert(certId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerCert", certId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerCert indicates an expected call of DeleteServerCert
func (mr *MockPKIMockRecorder) DeleteServerCert(certId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerCert", reflect.TypeOf((*MockPKI)(nil).DeleteServerCert), certId)
}

// CreateClientCert mocks base method
func (m *MockPKI) CreateClientCert(csr []byte, rootId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientCert", csr, rootId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientCert indicates an expected call of CreateClientCert
func (mr *MockPKIMockRecorder) CreateClientCert(csr, rootId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientCert", reflect.TypeOf((*MockPKI)(nil).CreateClientCert), csr, rootId)
}

// GetClientCert mocks base method
func (m *MockPKI) GetClientCert(certId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientCert", certId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCert indicates an expected call of GetClientCert
func (mr *MockPKIMockRecorder) GetClientCert(certId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCert", reflect.TypeOf((*MockPKI)(nil).GetClientCert), certId)
}

// DeleteClientCert mocks base method
func (m *MockPKI) DeleteClientCert(certId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientCert", certId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientCert indicates an expected call of DeleteClientCert
func (mr *MockPKIMockRecorder) DeleteClientCert(certId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientCert", reflect.TypeOf((*MockPKI)(nil).DeleteClientCert), certId)
}

// Close mocks base method
func (m *MockPKI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPKIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPKI)(nil).Close))
}

// MockPKIStorage is a mock of PKIStorage interface
type MockPKIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPKIStorageMockRecorder
}

// MockPKIStorageMockRecorder is the mock recorder for MockPKIStorage
type MockPKIStorageMockRecorder struct {
	mock *MockPKIStorage
}

// NewMockPKIStorage creates a new mock instance
func NewMockPKIStorage(ctrl *gomock.Controller) *MockPKIStorage {
	mock := &MockPKIStorage{ctrl: ctrl}
	mock.recorder = &MockPKIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPKIStorage) EXPECT() *MockPKIStorageMockRecorder {
	return m.recorder
}

// CreateCert mocks base method
func (m *MockPKIStorage) CreateCert(cert plugin.Cert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCert", cert)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCert indicates an expected call of CreateCert
func (mr *MockPKIStorageMockRecorder) CreateCert(cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCert", reflect.TypeOf((*MockPKIStorage)(nil).CreateCert), cert)
}

// DeleteCert mocks base method
func (m *MockPKIStorage) DeleteCert(certId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCert", certId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCert indicates an expected call of DeleteCert
func (mr *MockPKIStorageMockRecorder) DeleteCert(certId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCert", reflect.TypeOf((*MockPKIStorage)(nil).DeleteCert), certId)
}

// UpdateCert mocks base method
func (m *MockPKIStorage) UpdateCert(cert plugin.Cert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCert", cert)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCert indicates an expected call of UpdateCert
func (mr *MockPKIStorageMockRecorder) UpdateCert(cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCert", reflect.TypeOf((*MockPKIStorage)(nil).UpdateCert), cert)
}

// GetCert mocks base method
func (m *MockPKIStorage) GetCert(certId string) (*plugin.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCert", certId)
	ret0, _ := ret[0].(*plugin.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCert indicates an expected call of GetCert
func (mr *MockPKIStorageMockRecorder) GetCert(certId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCert", reflect.TypeOf((*MockPKIStorage)(nil).GetCert), certId)
}

// CountCertByParentId mocks base method
func (m *MockPKIStorage) CountCertByParentId(parentId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCertByParentId", parentId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCertByParentId indicates an expected call of CountCertByParentId
func (mr *MockPKIStorageMockRecorder) CountCertByParentId(parentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCertByParentId", reflect.TypeOf((*MockPKIStorage)(nil).CountCertByParentId), parentId)
}

// Close mocks base method
func (m *MockPKIStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPKIStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPKIStorage)(nil).Close))
}
