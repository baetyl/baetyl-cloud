// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: PKI)

// Package plugin is a generated GoMock package.
package plugin

import (
	x509 "crypto/x509"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPKI is a mock of PKI interface
type MockPKI struct {
	ctrl     *gomock.Controller
	recorder *MockPKIMockRecorder
}

// MockPKIMockRecorder is the mock recorder for MockPKI
type MockPKIMockRecorder struct {
	mock *MockPKI
}

// NewMockPKI creates a new mock instance
func NewMockPKI(ctrl *gomock.Controller) *MockPKI {
	mock := &MockPKI{ctrl: ctrl}
	mock.recorder = &MockPKIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPKI) EXPECT() *MockPKIMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockPKI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPKIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPKI)(nil).Close))
}

// CreateClientCert mocks base method
func (m *MockPKI) CreateClientCert(arg0 []byte, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientCert", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientCert indicates an expected call of CreateClientCert
func (mr *MockPKIMockRecorder) CreateClientCert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientCert", reflect.TypeOf((*MockPKI)(nil).CreateClientCert), arg0, arg1)
}

// CreateRootCert mocks base method
func (m *MockPKI) CreateRootCert(arg0 *x509.CertificateRequest, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRootCert", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRootCert indicates an expected call of CreateRootCert
func (mr *MockPKIMockRecorder) CreateRootCert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRootCert", reflect.TypeOf((*MockPKI)(nil).CreateRootCert), arg0, arg1)
}

// CreateServerCert mocks base method
func (m *MockPKI) CreateServerCert(arg0 []byte, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerCert", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerCert indicates an expected call of CreateServerCert
func (mr *MockPKIMockRecorder) CreateServerCert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerCert", reflect.TypeOf((*MockPKI)(nil).CreateServerCert), arg0, arg1)
}

// DeleteClientCert mocks base method
func (m *MockPKI) DeleteClientCert(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientCert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientCert indicates an expected call of DeleteClientCert
func (mr *MockPKIMockRecorder) DeleteClientCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientCert", reflect.TypeOf((*MockPKI)(nil).DeleteClientCert), arg0)
}

// DeleteRootCert mocks base method
func (m *MockPKI) DeleteRootCert(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRootCert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRootCert indicates an expected call of DeleteRootCert
func (mr *MockPKIMockRecorder) DeleteRootCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRootCert", reflect.TypeOf((*MockPKI)(nil).DeleteRootCert), arg0)
}

// DeleteServerCert mocks base method
func (m *MockPKI) DeleteServerCert(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerCert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerCert indicates an expected call of DeleteServerCert
func (mr *MockPKIMockRecorder) DeleteServerCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerCert", reflect.TypeOf((*MockPKI)(nil).DeleteServerCert), arg0)
}

// GetClientCert mocks base method
func (m *MockPKI) GetClientCert(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientCert", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCert indicates an expected call of GetClientCert
func (mr *MockPKIMockRecorder) GetClientCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCert", reflect.TypeOf((*MockPKI)(nil).GetClientCert), arg0)
}

// GetRootCert mocks base method
func (m *MockPKI) GetRootCert(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCert", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootCert indicates an expected call of GetRootCert
func (mr *MockPKIMockRecorder) GetRootCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCert", reflect.TypeOf((*MockPKI)(nil).GetRootCert), arg0)
}

// GetRootCertId mocks base method
func (m *MockPKI) GetRootCertId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCertId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRootCertId indicates an expected call of GetRootCertId
func (mr *MockPKIMockRecorder) GetRootCertId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCertId", reflect.TypeOf((*MockPKI)(nil).GetRootCertId))
}

// GetServerCert mocks base method
func (m *MockPKI) GetServerCert(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerCert", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerCert indicates an expected call of GetServerCert
func (mr *MockPKIMockRecorder) GetServerCert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerCert", reflect.TypeOf((*MockPKI)(nil).GetServerCert), arg0)
}
