// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: Callback)

// Package plugin is a generated GoMock package.
package plugin

import (
	sql "database/sql"
	models "github.com/baetyl/baetyl-cloud/v2/models"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockCallback is a mock of Callback interface
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
}

// MockCallbackMockRecorder is the mock recorder for MockCallback
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockCallback) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCallbackMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCallback)(nil).Close))
}

// CreateCallback mocks base method
func (m *MockCallback) CreateCallback(arg0 *models.Callback) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCallback", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCallback indicates an expected call of CreateCallback
func (mr *MockCallbackMockRecorder) CreateCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallback", reflect.TypeOf((*MockCallback)(nil).CreateCallback), arg0)
}

// CreateCallbackTx mocks base method
func (m *MockCallback) CreateCallbackTx(arg0 *sqlx.Tx, arg1 *models.Callback) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCallbackTx", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCallbackTx indicates an expected call of CreateCallbackTx
func (mr *MockCallbackMockRecorder) CreateCallbackTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCallbackTx", reflect.TypeOf((*MockCallback)(nil).CreateCallbackTx), arg0, arg1)
}

// DeleteCallback mocks base method
func (m *MockCallback) DeleteCallback(arg0, arg1 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCallback", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCallback indicates an expected call of DeleteCallback
func (mr *MockCallbackMockRecorder) DeleteCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCallback", reflect.TypeOf((*MockCallback)(nil).DeleteCallback), arg0, arg1)
}

// DeleteCallbackTx mocks base method
func (m *MockCallback) DeleteCallbackTx(arg0 *sqlx.Tx, arg1, arg2 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCallbackTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCallbackTx indicates an expected call of DeleteCallbackTx
func (mr *MockCallbackMockRecorder) DeleteCallbackTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCallbackTx", reflect.TypeOf((*MockCallback)(nil).DeleteCallbackTx), arg0, arg1, arg2)
}

// GetCallback mocks base method
func (m *MockCallback) GetCallback(arg0, arg1 string) (*models.Callback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallback", arg0, arg1)
	ret0, _ := ret[0].(*models.Callback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallback indicates an expected call of GetCallback
func (mr *MockCallbackMockRecorder) GetCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallback", reflect.TypeOf((*MockCallback)(nil).GetCallback), arg0, arg1)
}

// GetCallbackTx mocks base method
func (m *MockCallback) GetCallbackTx(arg0 *sqlx.Tx, arg1, arg2 string) (*models.Callback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallbackTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Callback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallbackTx indicates an expected call of GetCallbackTx
func (mr *MockCallbackMockRecorder) GetCallbackTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallbackTx", reflect.TypeOf((*MockCallback)(nil).GetCallbackTx), arg0, arg1, arg2)
}

// UpdateCallback mocks base method
func (m *MockCallback) UpdateCallback(arg0 *models.Callback) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCallback", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCallback indicates an expected call of UpdateCallback
func (mr *MockCallbackMockRecorder) UpdateCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCallback", reflect.TypeOf((*MockCallback)(nil).UpdateCallback), arg0)
}

// UpdateCallbackTx mocks base method
func (m *MockCallback) UpdateCallbackTx(arg0 *sqlx.Tx, arg1 *models.Callback) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCallbackTx", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCallbackTx indicates an expected call of UpdateCallbackTx
func (mr *MockCallbackMockRecorder) UpdateCallbackTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCallbackTx", reflect.TypeOf((*MockCallback)(nil).UpdateCallbackTx), arg0, arg1)
}
