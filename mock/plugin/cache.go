// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: DataCache)

// Package plugin is a generated GoMock package.
package plugin

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataCache is a mock of DataCache interface.
type MockDataCache struct {
	ctrl     *gomock.Controller
	recorder *MockDataCacheMockRecorder
}

// MockDataCacheMockRecorder is the mock recorder for MockDataCache.
type MockDataCacheMockRecorder struct {
	mock *MockDataCache
}

// NewMockDataCache creates a new mock instance.
func NewMockDataCache(ctrl *gomock.Controller) *MockDataCache {
	mock := &MockDataCache{ctrl: ctrl}
	mock.recorder = &MockDataCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataCache) EXPECT() *MockDataCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDataCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataCache)(nil).Close))
}

// Delete mocks base method.
func (m *MockDataCache) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataCacheMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataCache)(nil).Delete), arg0)
}

// Exist mocks base method.
func (m *MockDataCache) Exist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockDataCacheMockRecorder) Exist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockDataCache)(nil).Exist), arg0)
}

// Get mocks base method.
func (m *MockDataCache) Get(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataCache)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockDataCache) Set(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockDataCacheMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDataCache)(nil).Set), arg0, arg1)
}
