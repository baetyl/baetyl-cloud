// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: Record)

// Package plugin is a generated GoMock package.
package plugin

import (
	sql "database/sql"
	models "github.com/baetyl/baetyl-cloud/v2/models"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockRecord is a mock of Record interface
type MockRecord struct {
	ctrl     *gomock.Controller
	recorder *MockRecordMockRecorder
}

// MockRecordMockRecorder is the mock recorder for MockRecord
type MockRecordMockRecorder struct {
	mock *MockRecord
}

// NewMockRecord creates a new mock instance
func NewMockRecord(ctrl *gomock.Controller) *MockRecord {
	mock := &MockRecord{ctrl: ctrl}
	mock.recorder = &MockRecordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecord) EXPECT() *MockRecordMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockRecord) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRecordMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRecord)(nil).Close))
}

// CountRecord mocks base method
func (m *MockRecord) CountRecord(arg0, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRecord indicates an expected call of CountRecord
func (mr *MockRecordMockRecorder) CountRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRecord", reflect.TypeOf((*MockRecord)(nil).CountRecord), arg0, arg1, arg2)
}

// CountRecordTx mocks base method
func (m *MockRecord) CountRecordTx(arg0 *sqlx.Tx, arg1, arg2, arg3 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRecordTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRecordTx indicates an expected call of CountRecordTx
func (mr *MockRecordMockRecorder) CountRecordTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRecordTx", reflect.TypeOf((*MockRecord)(nil).CountRecordTx), arg0, arg1, arg2, arg3)
}

// CreateRecord mocks base method
func (m *MockRecord) CreateRecord(arg0 []models.Record) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecord indicates an expected call of CreateRecord
func (mr *MockRecordMockRecorder) CreateRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockRecord)(nil).CreateRecord), arg0)
}

// CreateRecordTx mocks base method
func (m *MockRecord) CreateRecordTx(arg0 *sqlx.Tx, arg1 []models.Record) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecordTx", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecordTx indicates an expected call of CreateRecordTx
func (mr *MockRecordMockRecorder) CreateRecordTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecordTx", reflect.TypeOf((*MockRecord)(nil).CreateRecordTx), arg0, arg1)
}

// DeleteRecord mocks base method
func (m *MockRecord) DeleteRecord(arg0, arg1, arg2 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecord indicates an expected call of DeleteRecord
func (mr *MockRecordMockRecorder) DeleteRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockRecord)(nil).DeleteRecord), arg0, arg1, arg2)
}

// DeleteRecordTx mocks base method
func (m *MockRecord) DeleteRecordTx(arg0 *sqlx.Tx, arg1, arg2, arg3 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecordTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecordTx indicates an expected call of DeleteRecordTx
func (mr *MockRecordMockRecorder) DeleteRecordTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecordTx", reflect.TypeOf((*MockRecord)(nil).DeleteRecordTx), arg0, arg1, arg2, arg3)
}

// GetRecord mocks base method
func (m *MockRecord) GetRecord(arg0, arg1, arg2 string) (*models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord
func (mr *MockRecordMockRecorder) GetRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockRecord)(nil).GetRecord), arg0, arg1, arg2)
}

// GetRecordByFingerprint mocks base method
func (m *MockRecord) GetRecordByFingerprint(arg0, arg1, arg2 string) (*models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordByFingerprint", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordByFingerprint indicates an expected call of GetRecordByFingerprint
func (mr *MockRecordMockRecorder) GetRecordByFingerprint(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordByFingerprint", reflect.TypeOf((*MockRecord)(nil).GetRecordByFingerprint), arg0, arg1, arg2)
}

// GetRecordByFingerprintTx mocks base method
func (m *MockRecord) GetRecordByFingerprintTx(arg0 *sqlx.Tx, arg1, arg2, arg3 string) (*models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordByFingerprintTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordByFingerprintTx indicates an expected call of GetRecordByFingerprintTx
func (mr *MockRecordMockRecorder) GetRecordByFingerprintTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordByFingerprintTx", reflect.TypeOf((*MockRecord)(nil).GetRecordByFingerprintTx), arg0, arg1, arg2, arg3)
}

// GetRecordTx mocks base method
func (m *MockRecord) GetRecordTx(arg0 *sqlx.Tx, arg1, arg2, arg3 string) (*models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordTx indicates an expected call of GetRecordTx
func (mr *MockRecordMockRecorder) GetRecordTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordTx", reflect.TypeOf((*MockRecord)(nil).GetRecordTx), arg0, arg1, arg2, arg3)
}

// ListRecord mocks base method
func (m *MockRecord) ListRecord(arg0, arg1 string, arg2 *models.Filter) ([]models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecord indicates an expected call of ListRecord
func (mr *MockRecordMockRecorder) ListRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecord", reflect.TypeOf((*MockRecord)(nil).ListRecord), arg0, arg1, arg2)
}

// ListRecordTx mocks base method
func (m *MockRecord) ListRecordTx(arg0 *sqlx.Tx, arg1, arg2 string, arg3 *models.Filter) ([]models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecordTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordTx indicates an expected call of ListRecordTx
func (mr *MockRecordMockRecorder) ListRecordTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordTx", reflect.TypeOf((*MockRecord)(nil).ListRecordTx), arg0, arg1, arg2, arg3)
}

// UpdateRecord mocks base method
func (m *MockRecord) UpdateRecord(arg0 *models.Record) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", arg0)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecord indicates an expected call of UpdateRecord
func (mr *MockRecordMockRecorder) UpdateRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockRecord)(nil).UpdateRecord), arg0)
}

// UpdateRecordTx mocks base method
func (m *MockRecord) UpdateRecordTx(arg0 *sqlx.Tx, arg1 *models.Record) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecordTx", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecordTx indicates an expected call of UpdateRecordTx
func (mr *MockRecordMockRecorder) UpdateRecordTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecordTx", reflect.TypeOf((*MockRecord)(nil).UpdateRecordTx), arg0, arg1)
}
