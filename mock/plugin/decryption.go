// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: Decrypt)

// Package plugin is a generated GoMock package.
package plugin

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDecrypt is a mock of Decrypt interface
type MockDecrypt struct {
	ctrl     *gomock.Controller
	recorder *MockDecryptMockRecorder
}

// MockDecryptMockRecorder is the mock recorder for MockDecrypt
type MockDecryptMockRecorder struct {
	mock *MockDecrypt
}

// NewMockDecrypt creates a new mock instance
func NewMockDecrypt(ctrl *gomock.Controller) *MockDecrypt {
	mock := &MockDecrypt{ctrl: ctrl}
	mock.recorder = &MockDecryptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDecrypt) EXPECT() *MockDecryptMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDecrypt) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDecryptMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDecrypt)(nil).Close))
}

// Decrypt mocks base method
func (m *MockDecrypt) Decrypt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockDecryptMockRecorder) Decrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDecrypt)(nil).Decrypt), arg0)
}
