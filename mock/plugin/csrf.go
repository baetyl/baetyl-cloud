// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: CsrfValidator)

// Package plugin is a generated GoMock package.
package plugin

import (
	common "github.com/baetyl/baetyl-cloud/v2/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCsrfValidator is a mock of CsrfValidator interface.
type MockCsrfValidator struct {
	ctrl     *gomock.Controller
	recorder *MockCsrfValidatorMockRecorder
}

// MockCsrfValidatorMockRecorder is the mock recorder for MockCsrfValidator.
type MockCsrfValidatorMockRecorder struct {
	mock *MockCsrfValidator
}

// NewMockCsrfValidator creates a new mock instance.
func NewMockCsrfValidator(ctrl *gomock.Controller) *MockCsrfValidator {
	mock := &MockCsrfValidator{ctrl: ctrl}
	mock.recorder = &MockCsrfValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCsrfValidator) EXPECT() *MockCsrfValidatorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCsrfValidator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCsrfValidatorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCsrfValidator)(nil).Close))
}

// Verify mocks base method.
func (m *MockCsrfValidator) Verify(arg0 *common.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockCsrfValidatorMockRecorder) Verify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCsrfValidator)(nil).Verify), arg0)
}
