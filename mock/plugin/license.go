// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/plugin (interfaces: License)

// Package plugin is a generated GoMock package.
package plugin

import (
	plugin "github.com/baetyl/baetyl-cloud/v2/plugin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLicense is a mock of License interface
type MockLicense struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseMockRecorder
}

// MockLicenseMockRecorder is the mock recorder for MockLicense
type MockLicenseMockRecorder struct {
	mock *MockLicense
}

// NewMockLicense creates a new mock instance
func NewMockLicense(ctrl *gomock.Controller) *MockLicense {
	mock := &MockLicense{ctrl: ctrl}
	mock.recorder = &MockLicenseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLicense) EXPECT() *MockLicenseMockRecorder {
	return m.recorder
}

// CheckLicense mocks base method
func (m *MockLicense) CheckLicense() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLicense")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckLicense indicates an expected call of CheckLicense
func (mr *MockLicenseMockRecorder) CheckLicense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLicense", reflect.TypeOf((*MockLicense)(nil).CheckLicense))
}

// CheckQuota mocks base method
func (m *MockLicense) CheckQuota(arg0 string, arg1 plugin.QuotaCollector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQuota", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckQuota indicates an expected call of CheckQuota
func (mr *MockLicenseMockRecorder) CheckQuota(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQuota", reflect.TypeOf((*MockLicense)(nil).CheckQuota), arg0, arg1)
}

// Close mocks base method
func (m *MockLicense) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLicenseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLicense)(nil).Close))
}

// ProtectCode mocks base method
func (m *MockLicense) ProtectCode() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectCode")
	ret0, _ := ret[0].(error)
	return ret0
}

// ProtectCode indicates an expected call of ProtectCode
func (mr *MockLicenseMockRecorder) ProtectCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectCode", reflect.TypeOf((*MockLicense)(nil).ProtectCode))
}
