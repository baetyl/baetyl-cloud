// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/plugin (interfaces: Sign)

// Package plugin is a generated GoMock package.
package plugin

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSign is a mock of Sign interface
type MockSign struct {
	ctrl     *gomock.Controller
	recorder *MockSignMockRecorder
}

// MockSignMockRecorder is the mock recorder for MockSign
type MockSignMockRecorder struct {
	mock *MockSign
}

// NewMockSign creates a new mock instance
func NewMockSign(ctrl *gomock.Controller) *MockSign {
	mock := &MockSign{ctrl: ctrl}
	mock.recorder = &MockSignMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSign) EXPECT() *MockSignMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSign) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSignMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSign)(nil).Close))
}

// Signature mocks base method
func (m *MockSign) Signature(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signature", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signature indicates an expected call of Signature
func (mr *MockSignMockRecorder) Signature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signature", reflect.TypeOf((*MockSign)(nil).Signature), arg0)
}

// Verify mocks base method
func (m *MockSign) Verify(arg0, arg1 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockSignMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSign)(nil).Verify), arg0, arg1)
}
