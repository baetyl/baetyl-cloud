// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/api (interfaces: SyncAPI)

// Package api is a generated GoMock package.
package api

import (
	v1 "github.com/baetyl/baetyl-go/v2/spec/v1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSyncAPI is a mock of SyncAPI interface
type MockSyncAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSyncAPIMockRecorder
}

// MockSyncAPIMockRecorder is the mock recorder for MockSyncAPI
type MockSyncAPIMockRecorder struct {
	mock *MockSyncAPI
}

// NewMockSyncAPI creates a new mock instance
func NewMockSyncAPI(ctrl *gomock.Controller) *MockSyncAPI {
	mock := &MockSyncAPI{ctrl: ctrl}
	mock.recorder = &MockSyncAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncAPI) EXPECT() *MockSyncAPIMockRecorder {
	return m.recorder
}

// Desire mocks base method
func (m *MockSyncAPI) Desire(arg0 v1.Message) (*v1.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Desire", arg0)
	ret0, _ := ret[0].(*v1.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Desire indicates an expected call of Desire
func (mr *MockSyncAPIMockRecorder) Desire(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Desire", reflect.TypeOf((*MockSyncAPI)(nil).Desire), arg0)
}

// Report mocks base method
func (m *MockSyncAPI) Report(arg0 v1.Message) (*v1.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", arg0)
	ret0, _ := ret[0].(*v1.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report
func (mr *MockSyncAPIMockRecorder) Report(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockSyncAPI)(nil).Report), arg0)
}
