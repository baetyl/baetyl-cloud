// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/service (interfaces: TaskService)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	task "github.com/baetyl/baetyl-go/v2/task"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaskService is a mock of TaskService interface
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// AddTask mocks base method
func (m *MockTaskService) AddTask(arg0 string, arg1 ...interface{}) (*task.TaskResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTask", varargs...)
	ret0, _ := ret[0].(*task.TaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTask indicates an expected call of AddTask
func (mr *MockTaskServiceMockRecorder) AddTask(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockTaskService)(nil).AddTask), varargs...)
}

// AddTaskWithKey mocks base method
func (m *MockTaskService) AddTaskWithKey(arg0 string, arg1 map[string]interface{}) (*task.TaskResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTaskWithKey", arg0, arg1)
	ret0, _ := ret[0].(*task.TaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTaskWithKey indicates an expected call of AddTaskWithKey
func (mr *MockTaskServiceMockRecorder) AddTaskWithKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskWithKey", reflect.TypeOf((*MockTaskService)(nil).AddTaskWithKey), arg0, arg1)
}

// Register mocks base method
func (m *MockTaskService) Register(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register
func (mr *MockTaskServiceMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTaskService)(nil).Register), arg0, arg1)
}

// StartWorker mocks base method
func (m *MockTaskService) StartWorker(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWorker", arg0)
}

// StartWorker indicates an expected call of StartWorker
func (mr *MockTaskServiceMockRecorder) StartWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorker", reflect.TypeOf((*MockTaskService)(nil).StartWorker), arg0)
}

// StopWorker mocks base method
func (m *MockTaskService) StopWorker() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopWorker")
}

// StopWorker indicates an expected call of StopWorker
func (mr *MockTaskServiceMockRecorder) StopWorker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorker", reflect.TypeOf((*MockTaskService)(nil).StopWorker))
}
