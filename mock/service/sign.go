// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/service (interfaces: SignService)

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSignService is a mock of SignService interface
type MockSignService struct {
	ctrl     *gomock.Controller
	recorder *MockSignServiceMockRecorder
}

// MockSignServiceMockRecorder is the mock recorder for MockSignService
type MockSignServiceMockRecorder struct {
	mock *MockSignService
}

// NewMockSignService creates a new mock instance
func NewMockSignService(ctrl *gomock.Controller) *MockSignService {
	mock := &MockSignService{ctrl: ctrl}
	mock.recorder = &MockSignServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignService) EXPECT() *MockSignServiceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSignService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSignServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSignService)(nil).Close))
}

// GenToken mocks base method
func (m *MockSignService) GenToken(arg0 map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenToken indicates an expected call of GenToken
func (mr *MockSignServiceMockRecorder) GenToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenToken", reflect.TypeOf((*MockSignService)(nil).GenToken), arg0)
}

// Signature mocks base method
func (m *MockSignService) Signature(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signature", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signature indicates an expected call of Signature
func (mr *MockSignServiceMockRecorder) Signature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signature", reflect.TypeOf((*MockSignService)(nil).Signature), arg0)
}

// Verify mocks base method
func (m *MockSignService) Verify(arg0, arg1 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockSignServiceMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSignService)(nil).Verify), arg0, arg1)
}
