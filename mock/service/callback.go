// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/service (interfaces: CallbackService)

// Package plugin is a generated GoMock package.
package plugin

import (
	models "github.com/baetyl/baetyl-cloud/v2/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCallbackService is a mock of CallbackService interface
type MockCallbackService struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackServiceMockRecorder
}

// MockCallbackServiceMockRecorder is the mock recorder for MockCallbackService
type MockCallbackServiceMockRecorder struct {
	mock *MockCallbackService
}

// NewMockCallbackService creates a new mock instance
func NewMockCallbackService(ctrl *gomock.Controller) *MockCallbackService {
	mock := &MockCallbackService{ctrl: ctrl}
	mock.recorder = &MockCallbackServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCallbackService) EXPECT() *MockCallbackServiceMockRecorder {
	return m.recorder
}

// Callback mocks base method
func (m *MockCallbackService) Callback(arg0, arg1 string, arg2 map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Callback indicates an expected call of Callback
func (mr *MockCallbackServiceMockRecorder) Callback(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockCallbackService)(nil).Callback), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockCallbackService) Create(arg0 *models.Callback) (*models.Callback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Callback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCallbackServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCallbackService)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockCallbackService) Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCallbackServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCallbackService)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockCallbackService) Get(arg0, arg1 string) (*models.Callback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*models.Callback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCallbackServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCallbackService)(nil).Get), arg0, arg1)
}

// Update mocks base method
func (m *MockCallbackService) Update(arg0 *models.Callback) (*models.Callback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Callback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockCallbackServiceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCallbackService)(nil).Update), arg0)
}
