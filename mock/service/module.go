// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/service (interfaces: ModuleService)

// Package service is a generated GoMock package.
package service

import (
	models "github.com/baetyl/baetyl-cloud/v2/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModuleService is a mock of ModuleService interface
type MockModuleService struct {
	ctrl     *gomock.Controller
	recorder *MockModuleServiceMockRecorder
}

// MockModuleServiceMockRecorder is the mock recorder for MockModuleService
type MockModuleServiceMockRecorder struct {
	mock *MockModuleService
}

// NewMockModuleService creates a new mock instance
func NewMockModuleService(ctrl *gomock.Controller) *MockModuleService {
	mock := &MockModuleService{ctrl: ctrl}
	mock.recorder = &MockModuleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModuleService) EXPECT() *MockModuleServiceMockRecorder {
	return m.recorder
}

// CreateModule mocks base method
func (m *MockModuleService) CreateModule(arg0 *models.Module) (*models.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModule", arg0)
	ret0, _ := ret[0].(*models.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModule indicates an expected call of CreateModule
func (mr *MockModuleServiceMockRecorder) CreateModule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModule", reflect.TypeOf((*MockModuleService)(nil).CreateModule), arg0)
}

// DeleteModuleByVersion mocks base method
func (m *MockModuleService) DeleteModuleByVersion(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModuleByVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModuleByVersion indicates an expected call of DeleteModuleByVersion
func (mr *MockModuleServiceMockRecorder) DeleteModuleByVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModuleByVersion", reflect.TypeOf((*MockModuleService)(nil).DeleteModuleByVersion), arg0, arg1)
}

// DeleteModules mocks base method
func (m *MockModuleService) DeleteModules(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModules", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModules indicates an expected call of DeleteModules
func (mr *MockModuleServiceMockRecorder) DeleteModules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModules", reflect.TypeOf((*MockModuleService)(nil).DeleteModules), arg0)
}

// GetLatestModule mocks base method
func (m *MockModuleService) GetLatestModule(arg0 string) (*models.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestModule", arg0)
	ret0, _ := ret[0].(*models.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestModule indicates an expected call of GetLatestModule
func (mr *MockModuleServiceMockRecorder) GetLatestModule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestModule", reflect.TypeOf((*MockModuleService)(nil).GetLatestModule), arg0)
}

// GetLatestModuleImage mocks base method
func (m *MockModuleService) GetLatestModuleImage(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestModuleImage", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestModuleImage indicates an expected call of GetLatestModuleImage
func (mr *MockModuleServiceMockRecorder) GetLatestModuleImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestModuleImage", reflect.TypeOf((*MockModuleService)(nil).GetLatestModuleImage), arg0)
}

// GetLatestModuleProgram mocks base method
func (m *MockModuleService) GetLatestModuleProgram(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestModuleProgram", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestModuleProgram indicates an expected call of GetLatestModuleProgram
func (mr *MockModuleServiceMockRecorder) GetLatestModuleProgram(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestModuleProgram", reflect.TypeOf((*MockModuleService)(nil).GetLatestModuleProgram), arg0, arg1)
}

// GetModuleByImage mocks base method
func (m *MockModuleService) GetModuleByImage(arg0, arg1 string) (*models.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleByImage", arg0, arg1)
	ret0, _ := ret[0].(*models.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleByImage indicates an expected call of GetModuleByImage
func (mr *MockModuleServiceMockRecorder) GetModuleByImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleByImage", reflect.TypeOf((*MockModuleService)(nil).GetModuleByImage), arg0, arg1)
}

// GetModuleByVersion mocks base method
func (m *MockModuleService) GetModuleByVersion(arg0, arg1 string) (*models.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleByVersion", arg0, arg1)
	ret0, _ := ret[0].(*models.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleByVersion indicates an expected call of GetModuleByVersion
func (mr *MockModuleServiceMockRecorder) GetModuleByVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleByVersion", reflect.TypeOf((*MockModuleService)(nil).GetModuleByVersion), arg0, arg1)
}

// GetModules mocks base method
func (m *MockModuleService) GetModules(arg0 string) ([]models.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModules", arg0)
	ret0, _ := ret[0].([]models.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModules indicates an expected call of GetModules
func (mr *MockModuleServiceMockRecorder) GetModules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModules", reflect.TypeOf((*MockModuleService)(nil).GetModules), arg0)
}

// ListModules mocks base method
func (m *MockModuleService) ListModules(arg0 *models.Filter) ([]models.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", arg0)
	ret0, _ := ret[0].([]models.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModules indicates an expected call of ListModules
func (mr *MockModuleServiceMockRecorder) ListModules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*MockModuleService)(nil).ListModules), arg0)
}

// ListOptionalSysModules mocks base method
func (m *MockModuleService) ListOptionalSysModules(arg0 *models.Filter) ([]models.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOptionalSysModules", arg0)
	ret0, _ := ret[0].([]models.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOptionalSysModules indicates an expected call of ListOptionalSysModules
func (mr *MockModuleServiceMockRecorder) ListOptionalSysModules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOptionalSysModules", reflect.TypeOf((*MockModuleService)(nil).ListOptionalSysModules), arg0)
}

// ListRuntimeModules mocks base method
func (m *MockModuleService) ListRuntimeModules(arg0 *models.Filter) ([]models.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuntimeModules", arg0)
	ret0, _ := ret[0].([]models.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuntimeModules indicates an expected call of ListRuntimeModules
func (mr *MockModuleServiceMockRecorder) ListRuntimeModules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuntimeModules", reflect.TypeOf((*MockModuleService)(nil).ListRuntimeModules), arg0)
}

// UpdateModule mocks base method
func (m *MockModuleService) UpdateModule(arg0 *models.Module) (*models.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModule", arg0)
	ret0, _ := ret[0].(*models.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModule indicates an expected call of UpdateModule
func (mr *MockModuleServiceMockRecorder) UpdateModule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModule", reflect.TypeOf((*MockModuleService)(nil).UpdateModule), arg0)
}
