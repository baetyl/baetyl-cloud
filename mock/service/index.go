// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/service (interfaces: IndexService)

// Package service is a generated GoMock package.
package service

import (
	common "github.com/baetyl/baetyl-cloud/v2/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIndexService is a mock of IndexService interface
type MockIndexService struct {
	ctrl     *gomock.Controller
	recorder *MockIndexServiceMockRecorder
}

// MockIndexServiceMockRecorder is the mock recorder for MockIndexService
type MockIndexServiceMockRecorder struct {
	mock *MockIndexService
}

// NewMockIndexService creates a new mock instance
func NewMockIndexService(ctrl *gomock.Controller) *MockIndexService {
	mock := &MockIndexService{ctrl: ctrl}
	mock.recorder = &MockIndexServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexService) EXPECT() *MockIndexServiceMockRecorder {
	return m.recorder
}

// ListAppIndexByConfig mocks base method
func (m *MockIndexService) ListAppIndexByConfig(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppIndexByConfig", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppIndexByConfig indicates an expected call of ListAppIndexByConfig
func (mr *MockIndexServiceMockRecorder) ListAppIndexByConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppIndexByConfig", reflect.TypeOf((*MockIndexService)(nil).ListAppIndexByConfig), arg0, arg1)
}

// ListAppIndexBySecret mocks base method
func (m *MockIndexService) ListAppIndexBySecret(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppIndexBySecret", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppIndexBySecret indicates an expected call of ListAppIndexBySecret
func (mr *MockIndexServiceMockRecorder) ListAppIndexBySecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppIndexBySecret", reflect.TypeOf((*MockIndexService)(nil).ListAppIndexBySecret), arg0, arg1)
}

// ListAppsByNode mocks base method
func (m *MockIndexService) ListAppsByNode(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppsByNode", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppsByNode indicates an expected call of ListAppsByNode
func (mr *MockIndexServiceMockRecorder) ListAppsByNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppsByNode", reflect.TypeOf((*MockIndexService)(nil).ListAppsByNode), arg0, arg1)
}

// ListConfigIndexByApp mocks base method
func (m *MockIndexService) ListConfigIndexByApp(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConfigIndexByApp", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigIndexByApp indicates an expected call of ListConfigIndexByApp
func (mr *MockIndexServiceMockRecorder) ListConfigIndexByApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigIndexByApp", reflect.TypeOf((*MockIndexService)(nil).ListConfigIndexByApp), arg0, arg1)
}

// ListIndex mocks base method
func (m *MockIndexService) ListIndex(arg0 string, arg1, arg2 common.Resource, arg3 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIndex", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIndex indicates an expected call of ListIndex
func (mr *MockIndexServiceMockRecorder) ListIndex(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIndex", reflect.TypeOf((*MockIndexService)(nil).ListIndex), arg0, arg1, arg2, arg3)
}

// ListNodesByApp mocks base method
func (m *MockIndexService) ListNodesByApp(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesByApp", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodesByApp indicates an expected call of ListNodesByApp
func (mr *MockIndexServiceMockRecorder) ListNodesByApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesByApp", reflect.TypeOf((*MockIndexService)(nil).ListNodesByApp), arg0, arg1)
}

// RefreshAppIndexByConfig mocks base method
func (m *MockIndexService) RefreshAppIndexByConfig(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAppIndexByConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshAppIndexByConfig indicates an expected call of RefreshAppIndexByConfig
func (mr *MockIndexServiceMockRecorder) RefreshAppIndexByConfig(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAppIndexByConfig", reflect.TypeOf((*MockIndexService)(nil).RefreshAppIndexByConfig), arg0, arg1, arg2)
}

// RefreshAppsIndexByNode mocks base method
func (m *MockIndexService) RefreshAppsIndexByNode(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAppsIndexByNode", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshAppsIndexByNode indicates an expected call of RefreshAppsIndexByNode
func (mr *MockIndexServiceMockRecorder) RefreshAppsIndexByNode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAppsIndexByNode", reflect.TypeOf((*MockIndexService)(nil).RefreshAppsIndexByNode), arg0, arg1, arg2)
}

// RefreshConfigIndexByApp mocks base method
func (m *MockIndexService) RefreshConfigIndexByApp(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshConfigIndexByApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshConfigIndexByApp indicates an expected call of RefreshConfigIndexByApp
func (mr *MockIndexServiceMockRecorder) RefreshConfigIndexByApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshConfigIndexByApp", reflect.TypeOf((*MockIndexService)(nil).RefreshConfigIndexByApp), arg0, arg1, arg2)
}

// RefreshIndex mocks base method
func (m *MockIndexService) RefreshIndex(arg0 string, arg1, arg2 common.Resource, arg3 string, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshIndex", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshIndex indicates an expected call of RefreshIndex
func (mr *MockIndexServiceMockRecorder) RefreshIndex(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshIndex", reflect.TypeOf((*MockIndexService)(nil).RefreshIndex), arg0, arg1, arg2, arg3, arg4)
}

// RefreshNodesIndexByApp mocks base method
func (m *MockIndexService) RefreshNodesIndexByApp(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshNodesIndexByApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshNodesIndexByApp indicates an expected call of RefreshNodesIndexByApp
func (mr *MockIndexServiceMockRecorder) RefreshNodesIndexByApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshNodesIndexByApp", reflect.TypeOf((*MockIndexService)(nil).RefreshNodesIndexByApp), arg0, arg1, arg2)
}

// RefreshSecretIndexByApp mocks base method
func (m *MockIndexService) RefreshSecretIndexByApp(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSecretIndexByApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshSecretIndexByApp indicates an expected call of RefreshSecretIndexByApp
func (mr *MockIndexServiceMockRecorder) RefreshSecretIndexByApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSecretIndexByApp", reflect.TypeOf((*MockIndexService)(nil).RefreshSecretIndexByApp), arg0, arg1, arg2)
}
