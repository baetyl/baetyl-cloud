// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/service (interfaces: LockerService)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLockerService is a mock of LockerService interface
type MockLockerService struct {
	ctrl     *gomock.Controller
	recorder *MockLockerServiceMockRecorder
}

// MockLockerServiceMockRecorder is the mock recorder for MockLockerService
type MockLockerServiceMockRecorder struct {
	mock *MockLockerService
}

// NewMockLockerService creates a new mock instance
func NewMockLockerService(ctrl *gomock.Controller) *MockLockerService {
	mock := &MockLockerService{ctrl: ctrl}
	mock.recorder = &MockLockerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLockerService) EXPECT() *MockLockerServiceMockRecorder {
	return m.recorder
}

// Lock mocks base method
func (m *MockLockerService) Lock(arg0 context.Context, arg1 string, arg2 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock
func (mr *MockLockerServiceMockRecorder) Lock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLockerService)(nil).Lock), arg0, arg1, arg2)
}

// Unlock mocks base method
func (m *MockLockerService) Unlock(arg0 context.Context, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock", arg0, arg1, arg2)
}

// Unlock indicates an expected call of Unlock
func (mr *MockLockerServiceMockRecorder) Unlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLockerService)(nil).Unlock), arg0, arg1, arg2)
}
