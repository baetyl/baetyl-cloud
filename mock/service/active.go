// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/service (interfaces: ActiveService)

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockActiveService is a mock of ActiveService interface
type MockActiveService struct {
	ctrl     *gomock.Controller
	recorder *MockActiveServiceMockRecorder
}

// MockActiveServiceMockRecorder is the mock recorder for MockActiveService
type MockActiveServiceMockRecorder struct {
	mock *MockActiveService
}

// NewMockActiveService creates a new mock instance
func NewMockActiveService(ctrl *gomock.Controller) *MockActiveService {
	mock := &MockActiveService{ctrl: ctrl}
	mock.recorder = &MockActiveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActiveService) EXPECT() *MockActiveServiceMockRecorder {
	return m.recorder
}

// GetResource mocks base method
func (m *MockActiveService) GetResource(arg0, arg1, arg2 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource
func (mr *MockActiveServiceMockRecorder) GetResource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockActiveService)(nil).GetResource), arg0, arg1, arg2)
}
