// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/service (interfaces: InitializeService)

// Package plugin is a generated GoMock package.
package plugin

import (
	models "github.com/baetyl/baetyl-cloud/v2/models"
	v1 "github.com/baetyl/baetyl-go/v2/spec/v1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInitializeService is a mock of InitializeService interface
type MockInitializeService struct {
	ctrl     *gomock.Controller
	recorder *MockInitializeServiceMockRecorder
}

// MockInitializeServiceMockRecorder is the mock recorder for MockInitializeService
type MockInitializeServiceMockRecorder struct {
	mock *MockInitializeService
}

// NewMockInitializeService creates a new mock instance
func NewMockInitializeService(ctrl *gomock.Controller) *MockInitializeService {
	mock := &MockInitializeService{ctrl: ctrl}
	mock.recorder = &MockInitializeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInitializeService) EXPECT() *MockInitializeServiceMockRecorder {
	return m.recorder
}

// GetResource mocks base method
func (m *MockInitializeService) GetResource(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource
func (mr *MockInitializeServiceMockRecorder) GetResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockInitializeService)(nil).GetResource), arg0)
}

// GetSyncCert mocks base method
func (m *MockInitializeService) GetSyncCert(arg0, arg1 string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncCert", arg0, arg1)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncCert indicates an expected call of GetSyncCert
func (mr *MockInitializeServiceMockRecorder) GetSyncCert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncCert", reflect.TypeOf((*MockInitializeService)(nil).GetSyncCert), arg0, arg1)
}

// InitWithBitch mocks base method
func (m *MockInitializeService) InitWithBitch(arg0 *models.Batch, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitWithBitch", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitWithBitch indicates an expected call of InitWithBitch
func (mr *MockInitializeServiceMockRecorder) InitWithBitch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitWithBitch", reflect.TypeOf((*MockInitializeService)(nil).InitWithBitch), arg0, arg1)
}

// InitWithNode mocks base method
func (m *MockInitializeService) InitWithNode(arg0, arg1, arg2 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitWithNode", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitWithNode indicates an expected call of InitWithNode
func (mr *MockInitializeServiceMockRecorder) InitWithNode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitWithNode", reflect.TypeOf((*MockInitializeService)(nil).InitWithNode), arg0, arg1, arg2)
}
