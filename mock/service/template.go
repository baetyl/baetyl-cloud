// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baetyl/baetyl-cloud/v2/service (interfaces: TemplateService)

// Package service is a generated GoMock package.
package service

import (
	v1 "github.com/baetyl/baetyl-go/v2/spec/v1"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTemplateService is a mock of TemplateService interface
type MockTemplateService struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateServiceMockRecorder
}

// MockTemplateServiceMockRecorder is the mock recorder for MockTemplateService
type MockTemplateServiceMockRecorder struct {
	mock *MockTemplateService
}

// NewMockTemplateService creates a new mock instance
func NewMockTemplateService(ctrl *gomock.Controller) *MockTemplateService {
	mock := &MockTemplateService{ctrl: ctrl}
	mock.recorder = &MockTemplateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplateService) EXPECT() *MockTemplateServiceMockRecorder {
	return m.recorder
}

// GenSetupShell mocks base method
func (m *MockTemplateService) GenSetupShell(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenSetupShell", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenSetupShell indicates an expected call of GenSetupShell
func (mr *MockTemplateServiceMockRecorder) GenSetupShell(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenSetupShell", reflect.TypeOf((*MockTemplateService)(nil).GenSetupShell), arg0)
}

// GenSystemApps mocks base method
func (m *MockTemplateService) GenSystemApps(arg0, arg1 string, arg2 map[string]string) ([]*v1.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenSystemApps", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*v1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenSystemApps indicates an expected call of GenSystemApps
func (mr *MockTemplateServiceMockRecorder) GenSystemApps(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenSystemApps", reflect.TypeOf((*MockTemplateService)(nil).GenSystemApps), arg0, arg1, arg2)
}

// GetTemplate mocks base method
func (m *MockTemplateService) GetTemplate(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (mr *MockTemplateServiceMockRecorder) GetTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockTemplateService)(nil).GetTemplate), arg0)
}

// ParseTemplate mocks base method
func (m *MockTemplateService) ParseTemplate(arg0 string, arg1 map[string]interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTemplate", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemplate indicates an expected call of ParseTemplate
func (mr *MockTemplateServiceMockRecorder) ParseTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemplate", reflect.TypeOf((*MockTemplateService)(nil).ParseTemplate), arg0, arg1)
}

// UnmarshalTemplate mocks base method
func (m *MockTemplateService) UnmarshalTemplate(arg0 string, arg1 map[string]interface{}, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalTemplate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalTemplate indicates an expected call of UnmarshalTemplate
func (mr *MockTemplateServiceMockRecorder) UnmarshalTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalTemplate", reflect.TypeOf((*MockTemplateService)(nil).UnmarshalTemplate), arg0, arg1, arg2)
}
