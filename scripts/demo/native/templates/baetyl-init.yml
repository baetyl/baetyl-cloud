---
apiVersion: v1
kind: Namespace
metadata:
  name: {{.EdgeSystemNamespace}}

---
apiVersion: v1
kind: Namespace
metadata:
  name: {{.EdgeNamespace}}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: baetyl-edge-system-service-account
  namespace: {{.EdgeSystemNamespace}}

---
# elevation of authority
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: baetyl-edge-system-rbac
subjects:
  - kind: ServiceAccount
    name: baetyl-edge-system-service-account
    namespace: {{.EdgeSystemNamespace}}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

{{- if .CertSyncPem}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.CertSync}}
  namespace: {{.EdgeSystemNamespace}}
type: Opaque
data:
  client.pem: '{{.CertSyncPem}}'
  client.key: '{{.CertSyncKey}}'
  ca.pem: '{{.CertSyncCa}}'
{{- end}}

{{- if .CertActiveCa}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.CertActive}}
  namespace: {{.EdgeSystemNamespace}}
type: Opaque
data:
  ca.pem: '{{.CertActiveCa}}'
{{- end}}

---
# baetyl-init configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: baetyl-init-config
  namespace: {{.EdgeSystemNamespace}}
data:
  conf.yml: |-
    node:
      ca: var/lib/baetyl/node/ca.pem
      key: var/lib/baetyl/node/client.key
      cert: var/lib/baetyl/node/client.pem
    httplink:
      address: {{.NodeAddress}}
      insecureSkipVerify: true
    {{- if .CertSyncPem}}
    {{else}}
    init:
      batch:
        name: {{.BatchName}}
        namespace: {{.Namespace}}
        securityType: {{.SecurityType}}
        securityKey: {{.SecurityKey}}
      active:
        address: {{.ActiveAddress}}
        ca: var/lib/baetyl/cert-active/ca.pem
        insecureSkipVerify: true
        collector:
          {{- if eq .ProofType "input"}}
          server:
            listen: 0.0.0.0:{{.HostPort}}
            pages: /var/lib/baetyl/page
          {{- end}}
          fingerprints:
            - proof: {{.ProofType}}
              value: {{.ProofValue}}
          attributes:
            - name: batch
              label: BatchName
              value: {{.BatchName}}
            - name: namespace
              label: Namespace
              value: {{.Namespace}}
            {{- if eq .ProofType "input"}}
            - name: sn
              label: SerialNumber
            - name: description
              label: Description
            {{- end}}
    {{- end}}
    logger:
      filename: var/log/baetyl/init/service.log
      level: debug

---
# baetyl-init headless service
apiVersion: v1
kind: Service
metadata:
  name: baetyl-init
  namespace: {{.EdgeSystemNamespace}}
  labels:
    baetyl-service-name: baetyl-init
    baetyl-app-name: baetyl-init
spec:
  publishNotReadyAddresses: true
  {{- if .ProofType}}
  {{- if eq .ProofType "input"}}
  type: NodePort
  ports:
    - port: {{.ContainerPort}}
      targetPort: {{.ContainerPort}}
      nodePort: {{.HostPort}}
  {{else}}
  clusterIP: None
  {{- end}}
  {{else}}
  clusterIP: None
  {{- end}}
  selector:
    baetyl-service-name: baetyl-init
    
---
# baetyl-init deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: baetyl-init
  namespace: {{.EdgeSystemNamespace}}
  labels:
    baetyl-app-name: baetyl-init
    baetyl-service-name: baetyl-init
spec:
  selector:
    matchLabels:
      baetyl-service-name: baetyl-init
  replicas: 1
  template:
    metadata:
      labels:
        baetyl-app-name: baetyl-init
        baetyl-service-name: baetyl-init
    spec:
      nodeName: {{.KubeNodeName}}
      serviceAccountName: baetyl-edge-system-service-account
      containers:
        - name: baetyl-init
          image: {{.Image}}
          imagePullPolicy: IfNotPresent
          {{- if .ProofType}}
          {{- if eq .ProofType "input"}}
          ports:
            - containerPort: {{.ContainerPort}}
          {{- end}}
          {{- end}}
          command:
            - baetyl
          args:
            - init
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: data
              mountPath: /var/lib/baetyl/objects
            - name: store
              mountPath: /var/lib/baetyl/store
            - name: log
              mountPath: var/log/baetyl
            {{- if .CertSyncPem}}
            - name: cert-sync
              mountPath: var/lib/baetyl/node
            {{- end}}
            {{- if .CertActiveCa}}
            - name: cert-active
              mountPath: var/lib/baetyl/cert-active
            {{- end}}
            {{- if .ProofType}}
            {{- if eq .ProofType "sn"}}
            - name: sn
              mountPath: /var/lib/baetyl/sn
            {{- end}}
            {{- end}}
            - name: config
              mountPath: /etc/baetyl
      volumes:
        - name: data
          hostPath:
            path: /var/lib/baetyl/hostpath
        - name: store
          hostPath:
            path: /var/lib/baetyl/objects
        - name: log
          hostPath:
            path: /var/lib/baetyl/logs
        {{- if .CertSyncPem}}
        - name: cert-sync
          secret:
            secretName: {{.CertSync}}
        {{- end}}
        {{- if .CertActiveCa}}
        - name: cert-active
          secret:
            secretName: {{.CertActive}}
        {{- end}}
        {{- if .ProofType}}
        {{- if eq .ProofType "sn"}}
        - name: sn
          hostPath:
            path: {{.SnHostPath}}
        {{- end}}
        {{- end}}
        - name: config
          configMap:
            name: baetyl-init-config